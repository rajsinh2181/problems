// Input: nums = [5,7,7,8,8,10], target = 8
// Output: [3,4]

//Input: nums = [5,7,7,8,8,10], target = 6
//Output: [-1,-1]
 
 vector<int> searchRange(vector<int>& arr, int x) {
    vector <int> v;
    // cout <<  lower_bound(arr.begin(),arr.end(),x+1)-arr.begin();
    int n = arr.size();
    int l = 0, r = n - 1;
    int mid,flag = 0;
    //we search for any occurence of the element
    while ( l <= r){
        mid = (l+r)/2;
        if(arr[mid] < x) l = mid + 1;
        else if(arr[mid] > x) r = mid - 1;
        else {
            flag = 1;
            break;
        }
    }
    int mid_1 = mid;
    //we iterate left and right to find the end elements
    if(flag == 1){
        while(mid_1>0 && arr[mid_1] == arr[mid_1-1]){mid_1--;}
        v.push_back(mid_1);
        mid_1 = mid;
        while(mid_1 < n-1 && arr[mid_1] == arr[mid_1+1]){mid_1++;}
        v.push_back(mid_1);
    }
    else{
        v.push_back(-1);
        v.push_back(-1);
    }
    return v;
    }
    
    //Alternative method is to use lower_bound
    //which gives iterator to first element 
    //and then use lower_bound for target+1
