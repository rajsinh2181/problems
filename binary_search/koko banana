Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.
Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. 
If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.
Return the minimum integer k such that she can eat all the bananas within h hours.

Input: piles = [3,6,7,11], h = 8
Output: 4

 
 double time(vector <int> piles,double k){
        double sum_hr=0;
        for(int i=0;i<piles.size();i++){
            sum_hr+=ceil(piles[i]/k);
        }
        return sum_hr;
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        int hi = *max_element(piles.begin(),piles.end());
        int lo = 0;
        int mid;
        //binary logic
        while(lo<hi){
            mid = lo + (hi-lo)/2;
            //find time taken to eat at speed k
         // if it is in time bound check for lower speed by updating hi
         // otherwise update lo
            if(time(piles,mid) > h)lo = mid+1;
            else {
                hi = mid;
            }
        }
        return lo;
    }
